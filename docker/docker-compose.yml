# Docker Compose for MATLAB Engine API
# Production and development configurations

version: '3.8'

services:
  # Main MATLAB Engine API service
  matlab-engine-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      args:
        PYTHON_VERSION: ${PYTHON_VERSION:-3.11}
        MATLAB_VERSION: ${MATLAB_VERSION:-R2023b}
    image: matlab-engine-api:${VERSION:-latest}
    container_name: matlab-engine-api
    restart: unless-stopped
    
    environment:
      - MATLAB_ENGINE_ENV=${ENVIRONMENT:-production}
      - MATLAB_ENGINE_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MATLAB_ENGINE_PORT=${API_PORT:-8000}
      - MATLAB_ENGINE_WORKERS=${WORKERS:-4}
      - MATLAB_ENGINE_TIMEOUT=${TIMEOUT:-300}
      - PYTHONPATH=/app/src/python
      - DISPLAY=:99
    
    ports:
      - "${API_PORT:-8000}:8000"
    
    volumes:
      - matlab-logs:/app/logs
      - matlab-data:/app/data
      - matlab-config:/app/config
      # Development volume mounts (comment out for production)
      # - ../src/python:/app/src/python:ro
    
    networks:
      - matlab-network
    
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '${CPU_LIMIT:-2.0}'
          memory: ${MEMORY_LIMIT:-4G}
        reservations:
          cpus: '${CPU_RESERVATION:-0.5}'
          memory: ${MEMORY_RESERVATION:-1G}
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    
    user: "1000:1000"  # Non-root user
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
        labels: "service=matlab-engine-api"

  # Redis for caching and session management (optional)
  redis:
    image: redis:7-alpine
    container_name: matlab-redis
    restart: unless-stopped
    
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    
    volumes:
      - redis-data:/data
    
    networks:
      - matlab-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    profiles:
      - with-cache
      - full

  # PostgreSQL for persistent data storage (optional)
  postgres:
    image: postgres:15-alpine
    container_name: matlab-postgres
    restart: unless-stopped
    
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-matlab_engine}
      - POSTGRES_USER=${POSTGRES_USER:-matlab_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-matlab_password}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    
    networks:
      - matlab-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 3
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    
    profiles:
      - with-db
      - full

  # Monitoring with Prometheus metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: matlab-prometheus
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    networks:
      - matlab-network
    
    profiles:
      - monitoring
      - full

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: matlab-grafana
    restart: unless-stopped
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    networks:
      - matlab-network
    
    depends_on:
      - prometheus
    
    profiles:
      - monitoring
      - full

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: matlab-nginx
    restart: unless-stopped
    
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    
    networks:
      - matlab-network
    
    depends_on:
      - matlab-engine-api
    
    profiles:
      - proxy
      - full

# Network configuration
networks:
  matlab-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volume configuration
volumes:
  matlab-logs:
    driver: local
  matlab-data:
    driver: local
  matlab-config:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-logs:
    driver: local